require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ResortsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # ResortCategory. As you add validations to ResortCategory, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes){
    { :name => 'Name',
      :image => File.open(Rails.root.join('spec/fixtures/files/upload.jpg')),
      :web => 'http://webaddress.ru',
      :fb => 'http://fb.com/resort',
      :resort_category_id => 1,
      :level1_description => 'Description level 1',
      :level2_description => 'Description level 2',
      :level3_description => 'Description level 3',
      :airport  => 'Munich airport',
      :altitude_top => 3000,
      :altitude_bottom => 1000,
      :drop => 240,
      :terrain  => 100,
      :lifts  => 25,
      :slopes => '12/32/65',
      :map_url => 'http://resortmap.url',
    }
  }

  let(:gallery_images){
    {
        :images => [
            File.open(Rails.root.join('spec/fixtures/files/upload.jpg')),
            File.open(Rails.root.join('spec/fixtures/files/upload.jpg')),
        ]
    }
  }

  let(:invalid_attributes) {
    {:name => '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ResortCategoriesController. Be sure to keep this updated too.
  describe 'Admin' do

  login_admin

    describe "GET show" do
      it "assigns the requested resort as @resort" do
        resort = Resort.create! valid_attributes
        get :show, {:id => resort.to_param}
        expect(assigns(:resort)).to eq(resort)
      end
    end

    describe "GET edit" do
      it "assigns the requested resort as @resort" do
        resort = Resort.create! valid_attributes
        get :edit, {:id => resort.to_param}
        expect(assigns(:resort)).to eq(resort)
      end
    end

    describe "GET #new" do
      it "assigns a new Resort as @resort" do
        get :new, {}
        expect(assigns(:resort)).to be_a_new(Resort)
      end
    end

  describe "POST #create" do
    context "with valid params" do
      describe "creates a new Resort" do
        it "without image gallery" do
          expect {
            post :create, {:resort => valid_attributes}
          }.to change(Resort, :count).by(1)
        end

        it "with image gallery" do

          expect {
            post :create, {:resort => valid_attributes, :gallery_images => gallery_images}
          }.to change(Resort, :count).by(1)
        end
      end

      it "assigns a newly created resort as @resort" do
        post :create, {:resort => valid_attributes}
        expect(assigns(:resort)).to be_a(Resort)
        expect(assigns(:resort)).to be_persisted
      end
      it "redirects to the created resort" do
        post :create, {:resort => valid_attributes}
        expect(response).to redirect_to(Resort.last)
      end
    end
    context "with invalid params" do
      it "assigns a newly created but unsaved resort as @resort" do
        post :create, {:resort => invalid_attributes}
        expect(assigns(:resort)).to be_a_new(Resort)
      end

      it "re-renders the 'new' template" do
        post :create, {:resort => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          { :name => 'New Name',
            :email => 'new_email@mail.ru',
            :web => 'http://new-webaddress.ru',
            :fb => 'http://new-fb.com/resort',
            :resort_category_id => 1,
            :level1_description => 'Description level 01',
            :level2_description => 'Description level 02',
            :level3_description => 'Description level 03',
            :airport  => 'Milan Airport',
            :altitude_top => 4000,
            :altitude_bottom => 2000,
            :drop => 250,
            :terrain  => 200,
            :lifts  => 5,
            :slopes => '11/31/61',
            :map_url => 'http://new-resortmap.url'
          }
        }

        it "updates the requested resort" do
          resort = Resort.create! valid_attributes
          put :update, {:id => resort.id, :resort => new_attributes}
          resort.reload
          expect(response).to redirect_to(Resort.last)
        end

        it "assigns the requested resort as @resort" do
          resort = Resort.create! valid_attributes
          put :update, {:id => resort.to_param, :resort => new_attributes}
          expect(assigns(:resort)).to eq(resort)
        end

        it "redirects to the resort" do
          resort = Resort.create! valid_attributes
          put :update, {:id => resort.to_param, :resort => new_attributes}
          expect(response).to redirect_to(resort)
        end
      end
    end
  end

  describe 'Not Admin' do

    login_user

    describe "GET show" do
      it "assigns the requested resort as @resort" do
        resort = Resort.create! valid_attributes
        get :show, {:id => resort.to_param}
        expect(assigns(:resort)).to eq(resort)
      end
    end

    describe "GET edit" do
      it "assigns the requested resort as @resort" do
        resort = Resort.create! valid_attributes
        get :edit, {:id => resort.to_param}
        expect(response).to redirect_to( root_path )
        expect( response.request.flash[:alert] ).to eq('You are not authorized to access this page.')
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          { :name => 'New Name',
            :email => 'new_email@mail.ru',
          }
        }

        it "redirect with no access" do
          resort = Resort.create! valid_attributes
          put :update, {:id => resort.id, :resort => new_attributes}
          resort.reload
          expect(assigns(:resort)).to eq(resort)
          expect(response).to redirect_to( root_path )
          expect( response.request.flash[:alert] ).to eq('You are not authorized to access this page.')
        end
      end
    end
  end

end