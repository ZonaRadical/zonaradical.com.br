require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # ResortCategory. As you add validations to ResortCategory, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes){
    { :name => 'Name',
      :surname => 'Surname',
      :email => 'email@mail.ru',
      :password => 'password',
      :password_confirmation => 'password',
    }
  }

  let(:invalid_attributes) {
    {:name => '', :email => 'invalid email', :password => ''}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ResortCategoriesController. Be sure to keep this updated too.
  describe 'Admin' do

  login_admin

    describe "GET show" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        get :show, {:id => user.to_param}
        expect(assigns(:user)).to eq(user)
      end
    end

    describe "GET edit" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        get :edit, {:id => user.to_param}
        expect(assigns(:user)).to eq(user)
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          { :name => 'New Name',
            :email => 'new_email@mail.ru',
            :password => 'new_password',
            :password_confirmation => 'new_password',
          }
        }

        it "updates the requested user" do
          user = User.create! valid_attributes
          put :update, {:id => user.id, :user => new_attributes}
          user.reload
          expect(response).to redirect_to(User.last)
        end

        it "assigns the requested user as @user" do
          user = User.create! valid_attributes
          put :update, {:id => user.to_param, :user => new_attributes}
          expect(assigns(:user)).to eq(user)
        end

        it "redirects to the user" do
          user = User.create! valid_attributes
          put :update, {:id => user.to_param, :user => new_attributes}
          expect(response).to redirect_to(user)
        end
      end
    end
  end

  describe 'User' do

    login_user

    describe "GET show" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        get :show, {:id => user.to_param}
        expect(assigns(:user)).to eq(user)
      end
    end

    describe "GET edit" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        get :edit, {:id => user.to_param}
        expect(response).to redirect_to( root_path )
        expect( response.request.flash[:alert] ).to eq('You are not authorized to access this page.')
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          { :name => 'New Name',
            :email => 'new_email@mail.ru',
            :password => 'new_password',
            :password_confirmation => 'new_password',
          }
        }

        it "redirect with no access" do
          user = User.create! valid_attributes
          put :update, {:id => user.id, :user => new_attributes}
          user.reload
          expect(assigns(:user)).to eq(user)
          expect(response).to redirect_to( root_path )
          expect( response.request.flash[:alert] ).to eq('You are not authorized to access this page.')
        end
      end
    end
  end

end
