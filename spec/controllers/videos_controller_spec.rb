require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe VideosController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # VideoCategory. As you add validations to VideoCategory, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes){
    { :title => 'You Tube',
      :description => 'Description level 1',
      :source_cd => 0,
      :source_link => 'http://youtu.be/watch?v=WUFeSr-an-o'
    }
  }

  let(:invalid_attributes) {
    {
        :name => 'Title',
        :source_link => ''
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VideoCategoriesController. Be sure to keep this updated too.
  describe 'Admin' do

  login_admin

    describe "GET show" do
      it "assigns the requested video as @video" do
        video = Video.create! valid_attributes
        get :show, {:id => video.to_param}
        expect(assigns(:video)).to eq(video)
      end
    end

    describe "GET edit" do
      it "assigns the requested video as @video" do
        video = Video.create! valid_attributes
        get :edit, {:id => video.to_param}
        expect(assigns(:video)).to eq(video)
      end
    end

    describe "GET #new" do
      it "assigns a new Video as @video" do
        get :new, {}
        expect(assigns(:video)).to be_a_new(Video)
      end
    end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Video" do
          expect {
            post :create, {:video => valid_attributes}
          }.to change(Video, :count).by(1)
      end

      it "assigns a newly created video as @video" do
        post :create, {:video => valid_attributes}
        expect(assigns(:video)).to be_a(Video)
        expect(assigns(:video)).to be_persisted
      end
      it "redirects to the created video" do
        post :create, {:video => valid_attributes}
        expect(response).to redirect_to(Video.last)
      end
    end
    context "with invalid params" do
      it "assigns a newly created but unsaved video as @video" do
        post :create, {:video => invalid_attributes}
        expect(assigns(:video)).to be_a_new(Video)
      end

      it "re-renders the 'new' template" do
        post :create, {:video => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          { :name => 'New Name',
            :email => 'new_email@mail.ru',
            :web => 'http://new-webaddress.ru',
            :fb => 'http://new-fb.com/video',
            :video_category_id => 1,
            :level1_description => 'Description level 01',
            :level2_description => 'Description level 02',
            :level3_description => 'Description level 03',
            :airport  => 'Milan Airport',
            :altitude_top => 4000,
            :altitude_bottom => 2000,
            :drop => 250,
            :terrain  => 200,
            :lifts  => 5,
            :slopes => '11/31/61',
            :map_url => 'http://new-videomap.url'
          }
        }

        it "updates the requested video" do
          video = Video.create! valid_attributes
          put :update, {:id => video.id, :video => new_attributes}
          video.reload
          expect(response).to redirect_to(Video.last)
        end

        it "assigns the requested video as @video" do
          video = Video.create! valid_attributes
          put :update, {:id => video.to_param, :video => new_attributes}
          expect(assigns(:video)).to eq(video)
        end

        it "redirects to the video" do
          video = Video.create! valid_attributes
          put :update, {:id => video.to_param, :video => new_attributes}
          expect(response).to redirect_to(video)
        end
      end
    end
  end

  describe 'Not Admin' do

    login_user

    describe "GET show" do
      it "assigns the requested video as @video" do
        video = Video.create! valid_attributes
        get :show, {:id => video.to_param}
        expect(assigns(:video)).to eq(video)
      end
    end

    describe "GET edit" do
      it "assigns the requested video as @video" do
        video = Video.create! valid_attributes
        get :edit, {:id => video.to_param}
        expect(response).to redirect_to( root_path )
        expect( response.request.flash[:alert] ).to eq('You are not authorized to access this page.')
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          { :name => 'New Name',
            :email => 'new_email@mail.ru',
          }
        }

        it "redirect with no access" do
          video = Video.create! valid_attributes
          put :update, {:id => video.id, :video => new_attributes}
          video.reload
          expect(assigns(:video)).to eq(video)
          expect(response).to redirect_to( root_path )
          expect( response.request.flash[:alert] ).to eq('You are not authorized to access this page.')
        end
      end
    end
  end

end